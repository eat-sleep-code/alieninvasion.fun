var audio = { boom : new Audio('audio/boom.mp3'),boss : new Audio('audio/boss.mp3'),fire : new Audio('audio/fire.mp3'),hit : new Audio('audio/hit.mp3'),lose : new Audio('audio/lose.mp3'),power : new Audio('audio/power.mp3'),start : new Audio('audio/start.mp3'),win : new Audio('audio/win.mp3')};var boostPattern = '';var bossLevel = false;(function() {var lastTime = 0;var vendors = ['ms', 'moz', 'webkit', 'o'];for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];}if (!window.requestAnimationFrame)window.requestAnimationFrame = function(callback, element) {var currTime = new Date().getTime();var timeToCall = Math.max(0, 16 - (currTime - lastTime));var id = window.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);lastTime = currTime + timeToCall;return id;};if (!window.cancelAnimationFrame)window.cancelAnimationFrame = function(id) {clearTimeout(id);};}());var Game = new function() { var boards = [];this.initialize = function(canvasElementId,sprite_data,callback) {this.canvas = document.getElementById(canvasElementId);this.playerOffset = 20;this.canvasMultiplier= 1;this.setupMobile();this.width = window.innerHeight * 0.66; this.height= window.innerHeight;console.log(this.width, this.height);this.ctx = this.canvas.getContext && this.canvas.getContext('2d');if(!this.ctx) { return alert("Please upgrade your browser!"); }this.setupInput();this.loop(); if(this.mobile) {this.setBoard(4,new TouchControls());}SpriteSheet.load(sprite_data,callback);};var KEY_CODES = { 37:'left', 39:'right', 32 :'fire' };this.keys = {};this.setupInput = function() {window.addEventListener('keydown',function(e) {if(KEY_CODES[e.keyCode]) {Game.keys[KEY_CODES[e.keyCode]] = true;e.preventDefault();}},false);window.addEventListener('keyup',function(e) {if(KEY_CODES[e.keyCode]) {Game.keys[KEY_CODES[e.keyCode]] = false; e.preventDefault();}},false);};var lastTime = new Date().getTime();var maxTime = 1/30;this.loop = function() { var curTime = new Date().getTime();requestAnimationFrame(Game.loop);var dt = (curTime - lastTime)/1000;if(dt > maxTime) { dt = maxTime; }for(var i=0,len = boards.length;i<len;i++) {if(boards[i]) { boards[i].step(dt);boards[i].draw(Game.ctx);}}lastTime = curTime;};this.setBoard = function(num,board) { boards[num] = board; };this.setupMobile = function() {var container = document.getElementById("container"),hasTouch = !!('ontouchstart' in window),w = window.innerWidth, h = window.innerHeight;if(hasTouch) { this.mobile = true; }if(screen.width >= 1280 || !hasTouch) { return false; }if(w > h) {alert("Please rotate the device!");w = window.innerWidth; h = window.innerHeight;}this.canvas.style.width = "100vw";this.canvas.style.height = "100vh";};}();var SpriteSheet = new function() {this.map = { }; this.load = function(spriteData,callback) { this.map = spriteData;this.image = new Image();this.image.onload = callback;this.image.src = 'images/sprites.png';};this.draw = function(ctx,sprite,x,y,frame) {var s = this.map[sprite];if(!frame) frame = 0;ctx.drawImage(this.image,s.sx + frame * s.w, s.sy, s.w, s.h, Math.floor(x), Math.floor(y),s.w, s.h);};return this;}();var TitleScreen = function TitleScreen(title,subtitle,callback) {var up = false;this.step = function(dt) {if(!Game.keys.fire) up = true;if(up && Game.keys.fire && callback) callback();};this.draw = function(ctx) {ctx.fillStyle = "#FFFFFF";ctx.font = "bold 30px 'Verdana'";var measure = ctx.measureText(title); ctx.fillText(title,Game.width/2 - measure.width/2,Game.height/2);ctx.font = "bold 18px 'Verdana'";var measure2 = ctx.measureText(subtitle);ctx.fillText(subtitle,Game.width/2 - measure2.width/2,Game.height/2 + 40);};};var SplashScreen = function SplashScreen(imagePath, textline1, textline2, callback) {var up = false;this.step = function (dt) {if (!Game.keys.fire) up = true;if (up && Game.keys.fire && callback) callback();};this.draw = function (ctx) {ctx.fillStyle = "#FFFFFF";var splashImage = new Image();splashImage.src = imagePath;ctx.drawImage(splashImage, Game.width / 2 - 375 / 2, Game.height / 2 - 187, 375, 375);ctx.font = "normal 18px 'Verdana'";var measure1 = ctx.measureText(textline1);ctx.fillText(textline1, Game.width / 2 - measure1.width / 2, Game.height / 2 + 144);ctx.font = "normal 18px 'Verdana'";var measure2 = ctx.measureText(textline2);ctx.fillText(textline2, Game.width / 2 - measure2.width / 2, Game.height / 2 + 168);};};var GameBoard = function() {var board = this;this.objects = [];this.cnt = {};this.add = function(obj) { obj.board=this; this.objects.push(obj); this.cnt[obj.type] = (this.cnt[obj.type] || 0) + 1;return obj; };this.remove = function(obj) { var idx = this.removed.indexOf(obj);if(idx == -1) {this.removed.push(obj); return true;} else {return false;}};this.resetRemoved = function() { this.removed = []; };this.finalizeRemoved = function() {for(var i=0,len=this.removed.length;i<len;i++) {var idx = this.objects.indexOf(this.removed[i]);if(idx != -1) {this.cnt[this.removed[i].type]--;this.objects.splice(idx,1);}}};this.iterate = function(funcName) {var args = Array.prototype.slice.call(arguments,1);for(var i=0,len=this.objects.length;i<len;i++) {var obj = this.objects[i];obj[funcName].apply(obj,args);}};this.detect = function(func) {for(var i = 0,val=null, len=this.objects.length; i < len; i++) {if(func.call(this.objects[i])) return this.objects[i];}return false;};this.step = function(dt) { this.resetRemoved();this.iterate('step',dt);this.finalizeRemoved();};this.draw= function(ctx) {this.iterate('draw',ctx);};this.overlap = function(o1,o2) {return !((o1.y+o1.h-1<o2.y) || (o1.y>o2.y+o2.h-1) ||(o1.x+o1.w-1<o2.x) || (o1.x>o2.x+o2.w-1));};this.collide = function(obj,type) {return this.detect(function() {if(obj != this) {var col = (!type || this.type & type) && board.overlap(obj,this);return col ? this : false;}});};};var Sprite = function() { };Sprite.prototype.setup = function(sprite,props) {this.sprite = sprite;this.merge(props);this.frame = this.frame || 0;this.w = SpriteSheet.map[sprite].w;this.h = SpriteSheet.map[sprite].h;};Sprite.prototype.merge = function(props) {if(props) {for (var prop in props) {this[prop] = props[prop];}}};Sprite.prototype.draw = function(ctx) {SpriteSheet.draw(ctx,this.sprite,this.x,this.y,this.frame);};Sprite.prototype.hit = function(damage) {this.board.remove(this);};var Level = function(levelData,callback) {this.levelData = [];for(var i =0; i<levelData.length; i++) {this.levelData.push(Object.create(levelData[i]));}this.t = 0;this.callback = callback;};Level.prototype.step = function(dt) {var idx = 0, remove = [], curShip = null;this.t += dt * 1000;while((curShip = this.levelData[idx]) && (curShip[0] < this.t + 2000)) {if(this.t > curShip[1]) {remove.push(curShip);} else if(curShip[0] < this.t) {var enemy = enemies[curShip[3]],override = curShip[4];this.board.add(new Enemy(enemy,override));curShip[0] += curShip[2];}idx++;}for(var i=0,len=remove.length;i<len;i++) {var remIdx = this.levelData.indexOf(remove[i]);if(remIdx != -1) this.levelData.splice(remIdx,1);}if(this.levelData.length === 0 && this.board.cnt[OBJECT_ENEMY] === 0) {if(this.callback) this.callback();}if (bossLevel == false){try {if (String(curShip[3]).includes('Final')) {bossLevel = true;audio.boss.play();}}catch(error) {}}};Level.prototype.draw = function(ctx) { };var TouchControls = function() {var gutterWidth = 10;var unitWidth = Game.width/5;var blockWidth = unitWidth-gutterWidth;this.drawSquare = function(ctx,x,y,txt,on) {ctx.globalAlpha = on ? 0.1 : 0.5;ctx.fillStyle = "#CCC";ctx.fillRect(x,y,blockWidth,blockWidth);ctx.fillStyle = "#FFF";ctx.globalAlpha = 1.0;ctx.font = "bold " + (3*unitWidth/4) + "px 'Verdana'";var txtSize = ctx.measureText(txt);ctx.fillText(txt, x+blockWidth/2-txtSize.width/2, y+3*blockWidth/4+5);};this.draw = function(ctx) {ctx.save();var yLoc = Game.height - unitWidth;this.drawSquare(ctx, gutterWidth, yLoc, "\u140A", Game.keys.left);this.drawSquare(ctx, unitWidth + gutterWidth, yLoc, "\u1405", Game.keys.right);this.drawSquare(ctx, 4 * unitWidth, yLoc, "\u2739", Game.keys.fire);ctx.restore();};this.step = function(dt) { };this.trackTouch = function(e) {var touch;var x;e.preventDefault();Game.keys.left = false;Game.keys.right = false;for(var i=0;i<e.targetTouches.length;i++) {touch = e.targetTouches[i];x = touch.pageX / Game.canvasMultiplier - Game.canvas.offsetLeft;if(x < unitWidth) {boostPattern = boostPattern.concat('l');Game.keys.left = true;} if(x > unitWidth && x < 2*unitWidth) {boostPattern = boostPattern.concat('r');Game.keys.right = true;} if (boostPattern.includes('lllllllllllllllllrrrrrrrrrrrrrrrr')) {PlayerShip.boost();}}if(e.type == 'touchstart' || e.type == 'touchend') {for(i=0;i<e.changedTouches.length;i++) {touch = e.changedTouches[i];x = touch.pageX / Game.canvasMultiplier - Game.canvas.offsetLeft;if(x > 4 * unitWidth) {boostPattern = boostPattern.concat('u');Game.keys.fire = (e.type == 'touchstart');}}}};Game.canvas.addEventListener('touchstart',this.trackTouch,true);Game.canvas.addEventListener('touchmove',this.trackTouch,true);Game.canvas.addEventListener('touchend',this.trackTouch,true);Game.canvas.addEventListener('dblclick',function(e) { e.preventDefault(); },true);Game.canvas.addEventListener('click',function(e) { e.preventDefault(); },true);Game.playerOffset = unitWidth + 20;};var GamePoints = function() {if (reset == true){Game.points = 0;}var pointsLength = 8;this.draw = function(ctx) {ctx.save();ctx.font = "bold 18px 'Verdana'";ctx.fillStyle = "#FFFFFF";var txt = "" + Game.points;var i = pointsLength - txt.length, zeros = "";while(i-- > 0) { zeros += "0"; }ctx.fillText(zeros + txt,10,20);ctx.restore();};this.step = function(dt) { };};var GameHealth = function () {if (reset == true){Game.playerHealth = Game.defaultPlayerHealth;}var healthLength = 4;this.draw = function (ctx) {ctx.save();ctx.font = "bold 18px 'Verdana'";if (Game.playerHealth > Game.defaultPlayerHealth) {ctx.fillStyle = "#00A9E0";}else if (Game.playerHealth > 150) {ctx.fillStyle = "#FFFFFF";}else if (Game.playerHealth > 75) {ctx.fillStyle = "#FFB500";}else if (Game.playerHealth >= 0) {ctx.fillStyle = "#CE0037";}var txt = Game.playerHealth + " \u2764";var i = healthLength - txt.length, zeros = "";while (i-- > 0) { zeros += "\u2007"; }ctx.fillText(zeros + txt, Game.width - 80, 20);ctx.restore();};this.step = function (dt) { };};var ua = navigator.userAgent.toLowerCase();var gameStarted = false;var reset = true;var playerHealth = 300;var defaultPlayerHealth = playerHealth;var boostedPlayerHealth = 600;var waves = 45;var healthAlreadyBoosted = false;var levelsPlayed = 0;var levelsWithBoostReset = [3,7,15,21,28,35,70,99];var levelsWithAutoHealth = [5,9,23,42,49,69,89];var autoPlayerHealthIncrease = 100;var difficultyMultiplier = 1;Game.playerHealth = playerHealth;Game.defaultPlayerHealth = defaultPlayerHealth;Game.difficultyMultiplier = difficultyMultiplier;function keyPressEvent(e) {var keycode;keycode = e.key;if (keycode == 'ArrowUp' || 'ArrowDown') {e.preventDefault();}if (keycode == 'a' && keycode == 'Shift' && keycode == 'Control') {PlayerShip.boost();}}document.onkeydown = keyPressEvent;var sprites = {ship: { sx: 0, sy: 0, w: 37, h: 42, frames: 1 },missile: { sx: 0, sy: 30, w: 4, h: 10, frames: 1 },enemy_purple: { sx: 37, sy: 0, w: 42, h: 43, frames: 1 },enemy_bee: { sx: 79, sy: 0, w: 37, h: 43, frames: 1 },enemy_ship: { sx: 116, sy: 0, w: 42, h: 43, frames: 1 },enemy_circle: { sx: 158, sy: 0, w: 32, h: 33, frames: 1 },explosion: { sx: 0, sy: 64, w: 64, h: 64, frames: 12 },enemy_missile: { sx: 8, sy: 42, w: 4, h: 20, frame: 1, },enemy_bee_final: { sx: 215, sy: 0, w: 73, h: 50, frames: 1 },enemy_straight_final: { sx: 287, sy: 0, w: 73, h: 65, frames: 1 },enemy_circle_final: { sx: 360, sy: 0, w: 70, h: 60, frames: 1 }};var enemies = {straight: {x: 0, y: -50, sprite: 'enemy_ship', health: 20 * difficultyMultiplier,E: 100},ltr: {x: 0, y: -100, sprite: 'enemy_purple', health: 10 * difficultyMultiplier,B: 75, C: 1, E: 100, missiles: 2},circle: {x: 250, y: -50, sprite: 'enemy_circle', health: 10 * difficultyMultiplier,A: 0, B: -100, C: 1, E: 20, F: 100, G: 1, H: Math.PI / 2},wiggle: {x: 100, y: -50, sprite: 'enemy_bee', health: 20 * difficultyMultiplier,B: 50, C: 4, E: 100, firePercentage: 0.001, missiles: 2},step: {x: 0, y: -50, sprite: 'enemy_circle', health: 10 * difficultyMultiplier,B: 150, C: 1.2, E: 75},wiggleFinal: {x: 100, y: -50, sprite: 'enemy_bee_final', health: 100 * difficultyMultiplier,B: 50, C: 4, E: 100, firePercentage: 4, missiles: 4},straightFinal: {x: 0, y: -50, sprite: 'enemy_straight_final', health: 100 * difficultyMultiplier,E: 100, missiles: 3},circleFinal: {x: 0, y: -50, sprite: 'enemy_circle_final', health: 100 * difficultyMultiplier,A: 0, B: -100, C: 1, E: 20, F: 100, G: 1, H: Math.PI / 2, missiles: 2}};var OBJECT_PLAYER = 1,OBJECT_PLAYER_PROJECTILE = 2,OBJECT_ENEMY = 4,OBJECT_ENEMY_PROJECTILE = 8,OBJECT_POWERUP = 16;var startGame = function () {if (ua.match(/android/)) {Game.setBoard(0, new Starfield(50, 0.6, 100, true));} else {Game.setBoard(0, new Starfield(20, 0.4, 100, true));Game.setBoard(1, new Starfield(50, 0.6, 100));Game.setBoard(2, new Starfield(100, 1.0, 50));}if (window.innerWidth <= 576) {Game.setBoard(3, new SplashScreen('images/splash-mobile.svg',"","",playGame));}else{Game.setBoard(3, new SplashScreen('images/splash.svg',"","",playGame));}};var movementVariantArray = ['ltr', 'circle', 'step', 'straight', 'wiggle'];var finalMovementVariantArray = ['wiggleFinal', 'straightFinal', 'circleFinal'];var level1 = [];var wavesAdded = 0;var lastLevelStartVariant = 0;var lastLevelEndVariant = 0;waves = waves + Math.round(waves * (difficultyMultiplier/10));do {var levelStartVariant;if (wavesAdded === 0){levelStartVariant = 0;}else{var levelStartVariantBase = Math.floor(Math.random() * (3000-1000+1)+1000);levelStartVariant = lastLevelEndVariant + (levelStartVariantBase * (Math.floor(Math.random() * 2) == 1 ? 1 : -1));if (levelStartVariant <= 0){levelStartVariant = lastLevelStartVariant;}}lastLevelStartVariant = levelStartVariant;var levelEndVariant = levelStartVariant + (Math.floor(Math.random() * (5000 - 3000 + 1) + 3000));lastLevelEndVariant = levelEndVariant;var levelGapVariant;var levelMovementVariant;if (wavesAdded > waves - 4) {levelGapVariant = 900;levelMovementVariant = finalMovementVariantArray[Math.floor(Math.random() * finalMovementVariantArray.length)];}else{levelGapVariant = Math.floor(Math.random() * (800 - 400 + 1) + 400);levelMovementVariant = movementVariantArray[Math.floor(Math.random() * movementVariantArray.length)];}var gameCanvas = document.getElementById('game');var canvasWidth = gameCanvas.width;var levelXPositionVariant = Math.floor(Math.random() * (canvasWidth - 10 + 1) + 10);level1.push([levelStartVariant, levelEndVariant, levelGapVariant, levelMovementVariant, {x: levelXPositionVariant}]);wavesAdded++;}while (wavesAdded < waves);var playGame = function () {setTimeout(function(){var board = new GameBoard();board.add(new PlayerShip());board.add(new Level(level1, winGame));Game.playerHealth = defaultPlayerHealth;if (levelsWithAutoHealth.includes(levelsPlayed)){Game.playerHealth = Game.playerHealth + autoPlayerHealthIncrease;}if (levelsWithBoostReset.includes(levelsPlayed)){healthAlreadyBoosted = false;}Game.setBoard(3, board);if (reset == true) {Game.setBoard(5, new GamePoints(0));Game.setBoard(6, new GameHealth(0));}}, 500);};var winGame = function () {try {bossLevel = false;audio.boss.pause();audio.boss.currentTime = 0;}catch(error) {}audio.win.play();reset = false;difficultyMultiplier = difficultyMultiplier * 1.5;levelsPlayed = levelsPlayed + 1;Game.setBoard(3, new SplashScreen('images/win.svg', "", "", playGame));document.addEventListener('keydown', function(e) {if (e.key == ' ' || e.key == 'ArrowLeft' || e.key == 'ArrorRight') {setTimeout(function(){try {e.preventDefault();}catch(error) {}}, 1500);}});};var loseGame = function () {playerHealth = defaultPlayerHealth;try {bossLevel = false;audio.boss.pause();audio.boss.currentTime = 0;audio.start.pause();audio.start.currentTime = 0;}catch(error) {}audio.lose.play();difficultyMultiplier = 1;reset = true;levelsPlayed = 0;Game.setBoard(3, new SplashScreen('images/loss.svg', "", "", playGame));document.addEventListener('keydown', function(e) {if (e.key == ' ' || e.key == 'ArrowLeft' || e.key == 'ArrorRight') {setTimeout(function(){try {e.preventDefault();}catch(error) {}}, 1500);}});};var Starfield = function (speed, opacity, numStars, clear, color) {var stars = document.createElement("canvas");stars.width = Game.width;stars.height = Game.height;var starCtx = stars.getContext("2d");var offset = 0;if (clear) {starCtx.fillStyle = "#000";starCtx.fillRect(0, 0, stars.width, stars.height);}if (color) {starCtx.fillStyle = color;}else{starCtx.fillStyle = "#FFF";}starCtx.globalAlpha = opacity;for (var i = 0; i < numStars; i++) {starCtx.fillRect(Math.floor(Math.random() * stars.width),Math.floor(Math.random() * stars.height),2,2);}this.draw = function (ctx) {var intOffset = Math.floor(offset);var remaining = stars.height - intOffset;if (intOffset > 0) {ctx.drawImage(stars,0, remaining,stars.width, intOffset,0, 0,stars.width, intOffset);}if (remaining > 0) {ctx.drawImage(stars,0, 0,stars.width, remaining,0, intOffset,stars.width, remaining);}};this.step = function (dt) {offset += dt * speed;offset = offset % stars.height;};};var PlayerShip = function () {this.setup('ship', { vx: 0, reloadTime: 0.25, maxVel: 200 });this.reload = this.reloadTime;this.x = Game.width / 2 - this.w / 2;this.y = Game.height - Game.playerOffset - this.h;this.step = function (dt) {if (Game.keys.left) { this.vx = -this.maxVel; }else if (Game.keys.right) { this.vx = this.maxVel; }else { this.vx = 0; }this.x += this.vx * dt;if (this.x < 0) { this.x = 0; }else if (this.x > Game.width - this.w) {this.x = Game.width - this.w;}this.reload -= dt;if (Game.keys.fire && this.reload < 0) {Game.keys.fire = false;this.reload = this.reloadTime;audio.fire.play();this.board.add(new PlayerMissile(this.x, this.y + this.h / 2));this.board.add(new PlayerMissile(this.x + this.w, this.y + this.h / 2));}};};PlayerShip.boost = function () {if (healthAlreadyBoosted == false) {audio.power.play();playerHealth = boostedPlayerHealth;healthAlreadyBoosted = true;Game.playerHealth = playerHealth;if (ua.match(/android/) || Game.width <= 576) {Game.setBoard(0, new Starfield(100, 0.6, 100, true, "#00A9E0"));} else {Game.setBoard(0, new Starfield(60, 0.4, 100, true));Game.setBoard(1, new Starfield(150, 0.6, 100));Game.setBoard(2, new Starfield(300, 0.8, 50, false, "#00A9E0"));var checkHealth = setInterval(function () {if (playerHealth < defaultPlayerHealth){Game.setBoard(0, new Starfield(20, 0.4, 100, true));Game.setBoard(1, new Starfield(50, 0.6, 100));Game.setBoard(2, new Starfield(150, 0.8, 50, false, "#FFFFFF"));clearInterval(checkHealth);}}, 3000);}}};PlayerShip.prototype = new Sprite();PlayerShip.prototype.type = OBJECT_PLAYER;PlayerShip.prototype.hit = function (damage) {if (isNaN(damage) == false) {playerHealth = playerHealth - damage;audio.hit.play();Game.playerHealth = playerHealth;}if (playerHealth <= 0) {loseGame();}};var PlayerMissile = function (x, y) {this.setup('missile', { vy: -700, damage: 10 });this.x = x - this.w / 2;this.y = y - this.h;};PlayerMissile.prototype = new Sprite();PlayerMissile.prototype.type = OBJECT_PLAYER_PROJECTILE;PlayerMissile.prototype.step = function (dt) {this.y += this.vy * dt;var collision = this.board.collide(this, OBJECT_ENEMY);if (collision) {collision.hit(this.damage);this.board.remove(this);} else if (this.y < -this.h) {this.board.remove(this);}};var Enemy = function (blueprint, override) {this.merge(this.baseParameters);this.setup(blueprint.sprite, blueprint);this.merge(override);};Enemy.prototype = new Sprite();Enemy.prototype.type = OBJECT_ENEMY;Enemy.prototype.baseParameters = {A: 0, B: 0, C: 0, D: 0,E: 0, F: 0, G: 0, H: 0,t: 0, reloadTime: 0.75,reload: 0};Enemy.prototype.step = function (dt) {this.t += dt;this.vx = this.A + this.B * Math.sin(this.C * this.t + this.D);this.vy = this.E + this.F * Math.sin(this.G * this.t + this.H);this.x += this.vx * dt;this.y += this.vy * dt;var collision = this.board.collide(this, OBJECT_PLAYER);if (collision) {collision.hit(this.damage);this.board.remove(this);}if (Math.random() < 0.01 && this.reload <= 0) {this.reload = this.reloadTime;if (this.missiles == 2) {this.board.add(new EnemyMissile(this.x + this.w - 2, this.y + this.h));this.board.add(new EnemyMissile(this.x + 2, this.y + this.h));} else {this.board.add(new EnemyMissile(this.x + this.w / 2, this.y + this.h));}}this.reload -= dt;if (this.y > Game.height ||this.x < -this.w ||this.x > Game.width) {this.board.remove(this);}};Enemy.prototype.hit = function (damage) {this.health -= damage;if (this.health <= 0) {if (this.board.remove(this)) {Game.points += this.points || 100;this.board.add(new Explosion(this.x + this.w / 2, this.y + this.h / 2));audio.boom.play();}}};var EnemyMissile = function (x, y) {this.setup('enemy_missile', { vy: 200, damage: 10 });this.x = x - this.w / 2;this.y = y;};EnemyMissile.prototype = new Sprite();EnemyMissile.prototype.type = OBJECT_ENEMY_PROJECTILE;EnemyMissile.prototype.step = function (dt) {this.y += this.vy * dt;var collision = this.board.collide(this, OBJECT_PLAYER);if (collision) {collision.hit(this.damage);this.board.remove(this);} else if (this.y > Game.height) {this.board.remove(this);}};var Explosion = function (centerX, centerY) {this.setup('explosion', { frame: 0 });this.x = centerX - this.w / 2;this.y = centerY - this.h / 2;};Explosion.prototype = new Sprite();Explosion.prototype.step = function (dt) {this.frame++;if (this.frame >= 12) {this.board.remove(this);}};document.getElementById('game').addEventListener('click', startAudio);document.addEventListener('touchend', startAudio);function startAudio() {if (gameStarted == false) {try {audio.start.play();gameStarted = true;playGame();}catch(error) {}}}window.addEventListener("load", function () {Game.initialize("game", sprites, startGame);});window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'UA-136336-17');